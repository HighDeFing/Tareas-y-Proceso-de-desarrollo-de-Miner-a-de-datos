createdAt: "2019-09-17T14:25:20.614Z"
updatedAt: "2019-09-17T14:26:49.192Z"
type: "MARKDOWN_NOTE"
folder: "9a7367601b9b14252c12"
title: "\"9, 10 GGPlot2 Parte 2 y Extras\""
tags: []
content: '''
  ---
  title: "9, 10 GGPlot2 Parte 2 y Extras"
    author: "AdolfoA"
    date: "15/9/2019"
    output: html_document
  ---
    
    # GGPlot2 Parte 2 y Extras
    
    **Contenidos**
    <!-- toc -->
  
  - [Introduccion](#Introduccion)
    * [Objetos graficos](#Objetos-graficos)
    * [Personalizacion de Funciones](#Personalizacion-de-Funciones)
    * [Extras](#Extras)
  
  <!-- tocstop -->
     ## Introduccion 
    En la seccion anterior se vio la gran versatilidad de opciones que se tiene en qplot para el manejo de graficos, en esta seccion se profundizara  un poco mas sobre las opciones diponibles en plot.
    
   ### Objetos graficos
    
    AL igual como se podian crear variables para las paletas de colores, se pueden crear  variables que almacenen un objeto gráfico, esto se hace de la siguiente manera.
    
    ```R
   g <- ggplot(mpg,aes(displ,hwy))
  ```
  
  De esta forma la variable g guardara todos los datos del cojunto de datos a graficar (mpg en nuestro caso de estudio, data sets de autos reconocido), sin embargo, no se puee imprimir solo con g, se debe hacer de la siguiente forma.
  
    ```R
  > g+geom_point() 
  ```
  De esta manera se peuden ir agregando "layers" a la variable creada g.
  
    ```R
  > g+geom_point()+geom_smooth() 
  
  ```
  Ahora se desplegara el area sombreda que representa la zona de confiaza (banda de confianza). Tambien se puede cambiar la forma en que se hace el suavizado "smooth", podriamos agregar un metodo de regresion lineal de la siguiente manera.
  
    ```R
  > g+geom_point()+geom_smooth(method="lm")
  
  ```
  Esto representa una gran ayuda y ventaja a la hora de combinar elementos ya que sobre la variable g pueden agregarse uno o varios "layers" y lograr todos los resultados previos de forma individual o en conjunto.
  
  Por ejemplo:
    ```R
  > g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)
  
  # tambien podemos personalizar los ejes y titulos, usando 
  
  ggtitle("Swirl Rules!") podemos agregar un titulo al grafico
  ```
  
  
   ### Personalizacion de Funciones
   
  Ya se vio que se puede agregar a un objeto grafico definido variedad de "layers" para trabajar en conjunto, sim embargo, el modo por defecto de estas funciones podrían no ser suficientes para expresar nuetra data, por lo que se pueden personalizar tambien las fuciones previas. Por ejemplo
  
  
  Podemos moficar la la funcion geom_point() para agregar un colo y tamaño requerido.
  
    ```R
  > g+geom_point(color="pink",size=4,alpha=1/2)
    ```
  
  De esta forma una funcion peude crecer y crecer! Hasta quedar 100 % personalizada segun la necesidad del usaurio (modificar titulos, ejes, colores, formas, etc)
  
   ```R
  > g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
    ```
  
  
   ### Extras
   
   Dado un conjunto de datos como el mostrado, el cual contiene datos sobre los diamantes, se puede:
  
   ```R
  Classes ‘tbl_df’, ‘tbl’ and 'data.frame':	53940 obs. of  10 variables:
   $ carat  : num  0.23 0.21 0.23 0.29 0.31 0.24 0.24 0.26 0.22 0.23 ...
   $ cut    : Ord.factor w/ 5 levels "Fair"<"Good"<..: 5 4 2 4 2 3 3 3 1 3 ...
   $ color  : Ord.factor w/ 7 levels "D"<"E"<"F"<"G"<..: 2 2 2 6 7 7 6 5 2 5 ...
   $ clarity: Ord.factor w/ 8 levels "I1"<"SI2"<"SI1"<..: 2 3 5 4 2 6 7 3 4 5 ...
   $ depth  : num  61.5 59.8 56.9 62.4 63.3 62.8 62.3 61.9 65.1 59.4 ...
   $ table  : num  55 61 65 58 58 57 57 55 61 61 ...
   $ price  : int  326 326 327 334 335 336 336 337 337 338 ...
   $ x      : num  3.95 3.89 4.05 4.2 4.34 3.94 3.95 4.07 3.87 4 ...
   $ y      : num  3.98 3.84 4.07 4.23 4.35 3.96 3.98 4.11 3.78 4.05 ...
   $ z      : num  2.43 2.31 2.31 2.63 2.75 2.48 2.47 2.53 2.49 2.39 ...
    ```
  
  Saber el rango de precio de los diamantes por ejemplo, usando:
  
   ```R
  > range(diamonds$price)
  [1]   326 18823
  
   ```
   Tambien podemos expresan los datos en funcion de su densidad, asi podremos representar que tantos diamantes "caen" en cierto precio. Para ello usamo:
  
   ```R
   > qplot(price,data=diamonds,geom="density")
   > 
   ```
   
  Podemos representar no solo como densidad, pueden generarse graficos de dispersion (carat) tambien.
  
  
  
  ```R
  > qplot(carat,price,data=diamonds)
  > # el parametro carat define grafico de dispersion
   ```
  
  Igualemente se puede ir personalizando los paramentros para agregar colores y formas a nuestro grafico de dispersion
  
  ```R
  > qplot(carat,price,data=diamonds, shape=cut)
  
  > qplot(carat,price,data=diamonds, color=cut)
  > 
  > # podemos agregar layers igualemnte
  > 
  > qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
  ```
  
  En conclusion GGplot2 es una herramienta muy poderosa que nos permite manipular y personalizar la representacion de data en forma de graficos de una manera muy amplia mediante su implemtacion de "gramaticas" y "layers" que pueden verse como una composicion de elementes sobre una variable grafica, esto genera representaciones quiza un poco mas complejas y no comunes, pero, sin duda alguna mucho mas representativas y analiticas que los tradicionales graficos que suelen usarse a menudo. 
  
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
