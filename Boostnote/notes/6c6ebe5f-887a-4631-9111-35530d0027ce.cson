createdAt: "2019-09-05T19:06:19.835Z"
updatedAt: "2019-09-15T20:24:19.051Z"
type: "MARKDOWN_NOTE"
folder: "b1852f4472eb7b3106fc"
title: "\"Manipulating Data with dplyr\""
tags: []
content: '''
  ---
  title: "Manipulating Data with dplyr"
  author: "heider"
  date: "30/7/2019"
  output: html_document
  ---
  
  # Manipulating Data with dplyr
  
  **Contenidos**
  <!-- toc -->
  
  - [Introduccion](#Introduccion)
  - [Manipulating Data with dplyr](#Manipulating-Data-with-dplyr)
      + [read](#read)
      + [dim](#dim)
      + [head and tail](#head-and-tail)
      + [library(dplyr)](#librarydplyr)
        - [packageVersion("dplyr")](#packageVersiondplyr)
      + [tbl_df](#tbl_df)
    * [Los 5 verbos pricipales](#Los-5-verbos-pricipales)
      + [select](#select)
      + [filter](#filter)
      + [arrange](#arrange)
      + [mutate](#mutate)
      + [summarize](#summarize)
  
  <!-- tocstop -->
  
  ## Introduccion
  
  Obtencion y limpieza de los datos es la segunda fase en el proceso de mineria de datos, una vez hallamos planteados los objetivos, el siguiente paso es obtener los datos.
  
  Los datos no siempre vendran en csv (comma separated values) y una vez tengamos las columnas y las filas estos tienen que pasar por un proceso de saber cuales son los datos (filas y columnas) que nos interesan, es un pequeño paso del preprocesamiento.
  
  
  ## Manipulating Data with dplyr
  
  Sobre dplyr, povee una gramatica flexible para la manipulacion de data. Es la proxima iteracion de plyr, centrada en herramientas para trabajar con data frames.
  
  #### read
  
  ```R
  read.csv(file, header = TRUE, sep = ",", quote = "/"", dec = ".", fill = TRUE, comment.char = "", ...)
  ```
  
  Lee un archivo en formato de tabla y crea un data frame desde el, con los casos correspondientes a filas y las variables a columnas del archivo.
  
  - `stringAsFactors` = `FALSE` por default R tiene esta opcion como `TRUE` en el turorial se indica colocarla como falsa, la razon es que en este caso, no queremos que nuestros strings pasen a ser factores (representacions basicamente numericas), si no strings.
  
  #### dim
  
  ```R
  dim(x)
  dim(x) <- value
  ```
  
  
  Devuelve o fija las dimesiones de un objeto.
  
  #### head and tail
  
  Returns the first or last parts of a vector, matrix, table, data frame or function. Since head() and tail() are generic functions, they may also have been extended to other classes.
  
  Regresa las primeras y ultimas partes de un vector, matriz, tabla, data frame o funcion. Como `head()` y `tail()` son funciones genericas, pueden estas extendidas en otras clases.
  
  ```R
  head(x, …)
  # S3 method for default
  head(x, n = 6L, …)
  # S3 method for data.frame
  
  tail(x, …)
  # S3 method for default
  tail(x, n = 6L, …)
  # S3 method for data.frame
  ```
  
  #### library(dplyr)
  
  Se utiliza para cargar el paquete de la libreria donde estan las funciones de `dplyr` normalmente esto lo tenemos que hacer de forma manual.
  
  ##### packageVersion("dplyr")
  
  Para saber la version, se recomienda tener 0.4.0 o posterior.
  
  #### tbl_df
  
  Crea un data frame en forma de tibbles, los tibbles son tablas mas compactas y una de las mayores ventajas que tiene es la forma en que se ve en consola.
  
  ```R
  tbl_df(data)
  ```
  
  tbl_df es la version de dyplr para crear tibbles pero ya se encuentra descontinuada, es su lugar se otra funcion que se puede encontrar en `library(tidyverse)`
  
  ```R
  library(tidyverse)
  
  as_tibble(x, ...)
  
  df <- as_tibble(x)
  ```
  
  ### Los 5 verbos pricipales 
  #### select
  
  Muestra solo las variables (columnas) que pasamos como argumentos.
  
  ```R
  select(.data, ...)
  ```
  
  - `.data` bebe ser un tibble.
  - `...` Mas expresionas sin comillas y separadas por comas. Tambien se pueden usar variables como si fueran posiciones, es decir, 5:20 (5 hasta 20)
  
  Si ponemos las variables con `-`, tambien podemos selecionar variables que no queremos, lo mismo puede ser aplicado como si fueran posiciones, es decir -(5:20) (-5 hasta -20)
  
  #### filter
  
  Usa filter para encontrar filas/casos donde las condiciones sean verdad. Las filas que tengan `NA` seran eliminadas.
  
  ```R
  filter(.data,...)
  filter(cran, package == "swirl")
  ```
  
  - `.data` bebe ser un tibble.
  - `...` Expresiones logicas definidas en terminos de las variables/columnas en `.data`, varias condiciones AND separadas por comas `,` y condiciones OR con `|`
  
  Las condiciones pasadas en filter pueden ser cualquiera de los operadores de comparacion estandar.
  
  `is.na()` devuelve si el valor es NA (missing) tambien util cuando utilizamos filter.
  
  #### arrange
  
  Ordena las filas por variables o columnas, trabaja de manera similar a `filter()`, solo que en vez de filtrar o seleccionar filas, las ordena de forma ascendete por defecto. Si propocionas mas de una variable, cada columna adicional es usada para romper empates entre filas de la precedente columna.
  
  ```R
  arrange(.data, ...)
  arrange(cran2, ip_id)
  ```
  - `.data` bebe ser un tibble.
  - `...` variables sin comillas que queremos ordenar.
  
  Para ordenar de forma decendente utilizar `desc()`
  ```R
  arrange(flights, desc(arr_delay))
  ```
  
  #### mutate
  
  Agrega nuevas variables en funcion de variables existentes, sin eliminar variables existentes.
  
  ```R
  mutate(.data, ...)
  mutate(cran3, size_mb = size / 2^20)
  ```
  
  - `.data` bebe ser un tibble.
  - `...` nombre y expresiones u operaciones que queramos operar en todas las filas de una variable.
  
  Podemos referenciar columnas que hayamos creado.
  
  ```R
  mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
  ```
  
  Si solo queremos dejar las variables que creamos usamos `transmute()`
  
  #### summarize
  
  Crea una o mas variables escalares que resumen en una sola fila, alguna variable. Es usada normalmente cuando ocurre un `group_by()` donde se crean mas filas por grupo.
  
  ```R
  summarise(.data, ...)
  
  summarize(.data, ...)
  
  summarize(cran, avg_bytes = mean(size))
  ```
  
  - `.data` bebe ser un tibble.
  - `...` nombre y valor pares las funciones que resumen. El nombre sera el nombre de la columna y el valor pueden ser expresiones como `mean(x)`, `n()`, `sum(is.na(y))`.
  
  
  
  
  
  
  
  
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
