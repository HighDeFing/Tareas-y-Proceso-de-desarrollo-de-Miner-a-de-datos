createdAt: "2019-09-13T15:43:01.414Z"
updatedAt: "2019-09-15T20:26:31.806Z"
type: "MARKDOWN_NOTE"
folder: "b1852f4472eb7b3106fc"
title: "\"Tidying Data with tidyr\""
tags: []
content: '''
  ---
  title: "Tidying Data with tidyr"
  author: "heider"
  date: "12/9/2019"
  output: html_document
  ---
  
  # Tidying Data with tidyr
  
  **Contenidos**
  
  <!-- toc -->
  
  - [library(tidyr)](#librarytidyr)
    * [gather](#gather)
    * [separate](#separate)
    * [spread](#spread)
  - [library(readr)](#libraryreadr)
    * [parse_number](#parse_number)
  - [unique](#unique)
  - [library(dplyr)](#librarydplyr)
    * [bind_rows](#bind_rows)
    * [select](#select)
      + [contains()](#contains)
  
  <!-- tocstop -->
  
  ## library(tidyr)
  
  Se utiliza para cargar el paquete de la libreria donde estan las funciones de `tidyr` normalmente esto lo tenemos que hacer de forma manual. Utilizado para ordernar o arreglar data.
  
  ### gather
  
  `gather` toma multiples columnas y las une en pares clave-valor. `gather` se utiliza cuando tenemos columnas que no son variables.
  
  ```R
  gather(data, key = "key", value = "value", ..., na.rm = FALSE,convert = FALSE, factor_key = FALSE)
  ```
  
  - `data` un data frame
  - `key, value` Nombres de las nuevas columnas clave-valor, como string o simbolos. Puede ser con comillas o sin ellas.
  - `...` seleccion de columnas, si se deja vacio toma todas las columnas, se puede usar `x:z` para seleccionar o `-x` para dejar una columna por fuera.
  - `na.rm` si TRUE, todos los NA o NaN son eliminados en la salida.
  - `convert` si TRUE, correra automaticamente `type.convert()` en la columna de clave. Util si los datos son numericos, enteros o logicos.
  - `factor_key` si FALSE, por defecto, los valores clave se guardaran como un vector de caracteres.
  
  Ejemplo:
  | |grade| male| female|
  |--- |---|---|---|
  |1   |  A  |  5   |   3|
  |2   |  B  |  4   |   1|
  |3 |    C  |  8 |     6|
  |4|     D   | 4  |    5|
  |5|     E   | 5  |    5|
  
  ```R
  gather(students, sex, count, -grade)
  ```
  | |  grade|    sex| count|
  |--- |---|---|---|
  |1  |    A |  male  |   5|
  |2|    B |  male  |   4|
  |3 |    C |  male  |   8|
  |4  |    D |  male  |   4|
  |5|    E |  male  |   5|
  |6 |   A |female  |   3|
  |7 |   B |female   |  1|
  |8 |    C |female  |   6|
  |9 |     D |female |    5|
  |10|     E |female|     5|
  
  
  Esta funcion sirve para crear tiddy data, donde tenemos columnas que representen valores en vez de variables y unir esas columnas en una sola, para tener clave-valor.
  
  ### separate
  
  Dado ya sea expresiones regulares o un vector de posicion de caracteres, `separate()` convierte una columna de un solo caracter en varias columnas.
  
  ```R
  separate(data, col, into, sep = "[^[:alnum:]]+", remove = TRUE, convert = FALSE, extra = "warn", fill = "warn", ...)
  ```
  
  - `data` un data frame.
  - `col` Columna a separar
  - `into` Nombres de las nuevas variables para crear un vector de caracteres
  - `sep` separador entre columnas, si es un caracter se interpreta como una expresion regular si es un numero se interpreta como una posicion.
  - `remove` si TRUE, remueve el la columna de entrada en la salida del data frame.
  - `covert` si TRUE, correra automaticamente `type.convert()` en la columna de clave. Util si los datos son numericos, enteros o logicos.
  - `extra` si `sep` es un vector, controla que sucede si hay muchos caracteres, `warn` es por defecto, emite una advertencia y elimina valores extra.
  - `fill` si `sep` es un vector, controla que sucede si no hay suficientes caracteres, `warn` es por defecto, emite una advertencia y rellena desde la derecha.
  - `...` Argumentos adicionales
  
  Ejemplo:
  Tabla students2
  |   	| grade 	| male_1 	| female_1 	| male_2 	| female_2 	|
  |---	|-------	|--------	|----------	|--------	|----------	|
  | 1 	| A     	| 7      	| 0        	| 5      	| 8        	|
  | 2 	| B     	| 4      	| 0        	| 5      	| 8        	|
  | 3 	| C     	| 7      	| 4        	| 5      	| 6        	|
  | 4 	| D     	| 8      	| 2        	| 8      	| 1        	|
  | 5 	| E     	| 8      	| 4        	| 1      	| 0        	|
  ```R
  students2 %>%
    gather(sex_class,count ,-grade ) %>%
    separate( col=sex_class, into=c("sex", "class")) %>%
    print
  ```
  
  Hacemos `gather()` para unir todos los valores de sexo y clase, luego `separate()` para separar en clases y sexo, al final tenemos este resultado
  
  |    	| grade 	| sex    	| class 	| count 	|
  |----	|-------	|--------	|-------	|-------	|
  | 1  	| A     	| male   	| 1     	| 7     	|
  | 2  	| B     	| male   	| 1     	| 4     	|
  | 3  	| C     	| male   	| 1     	| 7     	|
  | 4  	| D     	| male   	| 1     	| 8     	|
  | 5  	| E     	| male   	| 1     	| 8     	|
  | 6  	| A     	| female 	| 1     	| 0     	|
  | 7  	| B     	| female 	| 1     	| 0     	|
  | 8  	| C     	| female 	| 1     	| 4     	|
  | 9  	| D     	| female 	| 1     	| 2     	|
  | 10 	| E     	| female 	| 1     	| 4     	|
  | 11 	| A     	| male   	| 2     	| 5     	|
  | 12 	| B     	| male   	| 2     	| 5     	|
  | 13 	| C     	| male   	| 2     	| 5     	|
  | 14 	| D     	| male   	| 2     	| 8     	|
  | 15 	| E     	| male   	| 2     	| 1     	|
  | 16 	| A     	| female 	| 2     	| 8     	|
  | 17 	| B     	| female 	| 2     	| 8     	|
  | 18 	| C     	| female 	| 2     	| 6     	|
  | 19 	| D     	| female 	| 2     	| 1     	|
  | 20 	| E     	| female 	| 2     	| 0     	|
  
  `Separate()` es util cuando tenemos variables en filas que necesitamos que sean columnas.
  
  ### spread
  
  Riega clave-valor pares a travez de multiples columnas.
  
  ```R
  spread(data, key, value, fill = NA, convert = FALSE, drop = TRUE,sep = NULL)
  ```
  - `data` un data frame.
  - `key, value` nombres de columnas o posiciones. Puede ser con comillas o sin ellas.
  - `fill` si se utiliza, los valores faltantes seran rellenados por este valor.
  - `covert` si TRUE, correra automaticamente `type.convert()` `con asis = TRUE` en cada columna. Util si los datos son numericos, enteros o logicos pero fueron coaccinados a un string.
  - `drop` si FALSE, tendra los factores que no aparecen en la data y los rellenara con `fill`
  - `sep` si NULL, los nombres de las columnas seran tomados de los valores de las claves, si no NULL, los nombres de las columnas seran dados por `<nombre_clave><sep><valor_clave>`
  
  Ejemplo:
  Tabla students3
  |    	| name  	| test    	| class1 	| class2 	| class3 	| class4 	| class5 	|
  |----	|-------	|---------	|--------	|--------	|--------	|--------	|--------	|
  | 1  	| Sally 	| midterm 	| A      	| <NA>   	| B      	| <NA>   	| <NA>   	|
  | 2  	| Sally 	| final   	| C      	| <NA>   	| C      	| <NA>   	| <NA>   	|
  | 3  	| Jeff  	| midterm 	| <NA>   	| D      	| <NA>   	| A      	| <NA>   	|
  | 4  	| Jeff  	| final   	| <NA>   	| E      	| <NA>   	| C      	| <NA>   	|
  | 5  	| Roger 	| midterm 	| <NA>   	| C      	| <NA>   	| <NA>   	| B      	|
  | 6  	| Roger 	| final   	| <NA>   	| A      	| <NA>   	| <NA>   	| A      	|
  | 7  	| Karen 	| midterm 	| <NA>   	| <NA>   	| C      	| A      	| <NA>   	|
  | 8  	| Karen 	| final   	| <NA>   	| <NA>   	| C      	| A      	| <NA>   	|
  | 9  	| Brian 	| midterm 	| B      	| <NA>   	| <NA>   	| <NA>   	| A      	|
  | 10 	| Brian 	| final   	| B      	| <NA>   	| <NA>   	| <NA>   	| C      	|
  
  ```R
  students3 %>%
    gather(class, grade, class1:class5, na.rm = TRUE) %>%
    spread(test,grade) %>%
    print
  ```
  
  Hacemos gather para unir todas las clases en una sola, removemos los na, y luego hacemos spread para crear las columnas con las calves de class y los valores de grade.
  
  |    	| name   	| class  	| final 	| midterm 	|
  |----	|--------	|--------	|-------	|---------	|
  | 1  	| Brian  	| class1 	| B     	| B       	|
  | 2  	| Brian  	| class5 	| C     	| A       	|
  | 3  	| Jeff   	| class2 	| E     	| D       	|
  | 4  	| Jeff   	| class4 	| C     	| A       	|
  | 5  	| Karen  	| class3 	| C     	| C       	|
  | 6  	| Karen  	| class4 	| A     	| A       	|
  | 7  	| Roger  	| class2 	| A     	| C       	|
  | 8  	| Roger  	| class5 	| A     	| B       	|
  | 9  	| Sally  	| class1 	| C     	| A       	|
  | 10 	| Sally  	| class3 	| C     	| B       	|
  
  Spread se utiliza para crear columnas a partir de variables dentro de otra columna, donde lo valores estan en otra columna.
  
  ## library(readr)
  
  Se utiliza para cargar el paquete de la libreria donde estan las funciones de `readr` normalmente esto lo tenemos que hacer de forma manual. Es un paquete utilizado para leer data rectagular (como  'csv', 'tsv', y 'fwf').
  
  ### parse_number
  
  Esta funcion elimina todos los valores no numericos antes o despues del primer numero.
  
  ```R
  parse_number(x, na = c("", "NA"), locale = default_locale(),
    trim_ws = TRUE)
  col_number()
  ```
  
  - `x` Vector de caracteres para cambiar.
  - `na` Vector de caracteres string para interpretar como valores faltantes.
  - `locale` Por defecto utiliza US-centric, pero se puede utilizar `locale()` para definir codificacion, marca de decimales, nombres de dias y meses.
  - `trim_ws` Espacios en blanco antes y despues si deben ser cortados.
  
  Ejemplo:
  Tabla3
  |    	| name   	| class  	| final 	| midterm 	|
  |----	|--------	|--------	|-------	|---------	|
  | 1  	| Brian  	| class1 	| B     	| B       	|
  | 2  	| Brian  	| class5 	| C     	| A       	|
  | 3  	| Jeff   	| class2 	| E     	| D       	|
  | 4  	| Jeff   	| class4 	| C     	| A       	|
  | 5  	| Karen  	| class3 	| C     	| C       	|
  | 6  	| Karen  	| class4 	| A     	| A       	|
  | 7  	| Roger  	| class2 	| A     	| C       	|
  | 8  	| Roger  	| class5 	| A     	| B       	|
  | 9  	| Sally  	| class1 	| C     	| A       	|
  | 10 	| Sally  	| class3 	| C     	| B       	|
  
  ```R
  mutate(tabla3, class = parse_number(class)) %>%
  print
  ```
  
  |    	| name   	| class  	| final 	| midterm 	|
  |----	|--------	|--------	|-------	|---------	|
  | 1  	| Brian  	| 1 	| B     	| B       	|
  | 2  	| Brian  	| 5 	| C     	| A       	|
  | 3  	| Jeff   	| 2 	| E     	| D       	|
  | 4  	| Jeff   	| 4 	| C     	| A       	|
  | 5  	| Karen  	| 3 	| C     	| C       	|
  | 6  	| Karen  	| 4 	| A     	| A       	|
  | 7  	| Roger  	| 2 	| A     	| C       	|
  | 8  	| Roger  	| 5 	| A     	| B       	|
  | 9  	| Sally  	| 1 	| C     	| A       	|
  | 10 	| Sally  	| 3 	| C     	| B       	|
  
  ## unique
  
  Retorna un vectro, data frame o arreglo de X pero con los elementos duplicados eliminados.
  
  ```R
  unique(x, incomparables = FALSE, …)
  ```
  - `x` un vectro, data frame o arreglo.
  - `incomparables` un vector de valores que no pueden ser comparados, FALSE es un valor especial significando que todos los valores pueden ser comparados.
  
  Util para eliminar id repetidos o informacion redundante.
  
  ## library(dplyr)
  
  ### bind_rows
  
  Este es un metodo eficiente de el patron comun de `do.call(rbind, dfs)` o `do.call(cbind, dfs)` para unir varios data frames en uno.
  
  ```R
  bind_rows(..., .id = NULL)
  bind_cols(...)
  ```
  
  - `...` Data frames a combinar. 
  Cuando se unen por filas, se unen a travez del nombre, cualquier columna faltante se rellena con NA.
  Cuando se unen por columnas, las filas son unidas por posicion, asi todos los data frames tienen que tener el mismo numero de filas.
  - `.id` Cuando un id es suministrado una nueva columna de identificadores es creada que relaciona cada fila con su data frame original.
  
  ### select
  
  #### contains()
  
  ```R
  select(.data,-contains("total"))
  ```
  
  - `contains()` es una funcion especial que solo puede ser usada en select sirve para seleccionar columnas que contenga cierto string.
  
  
  
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
