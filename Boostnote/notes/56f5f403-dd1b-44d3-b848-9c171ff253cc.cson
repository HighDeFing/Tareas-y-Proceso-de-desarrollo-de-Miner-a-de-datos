createdAt: "2019-09-17T14:24:45.582Z"
updatedAt: "2019-09-17T14:26:57.817Z"
type: "MARKDOWN_NOTE"
folder: "9a7367601b9b14252c12"
title: "\"8 GGPlot2 Parte 1\""
tags: []
content: '''
  ---
  title: "8 GGPlot2 Parte 1"
    author: "Adolfo"
    date: "14/9/2019"
    output: html_document
  ---
    
    # GGPlot2
    
    **Contenidos**
    <!-- toc -->
  
  - [Introduccion](#Introduccion)
  - [qplot()](#qplot)
      + [gcolorRamp](#gcolorRamp)
      + [colorRampPalette](#colorRampPalette)
  
  <!-- tocstop -->
    
    ## Introduccion
    
   GGplot 2 representa la tercera forma de graficacion en R, esta se basa en una gramatica gráfica, que representa una "abstracion grafica" donde se identifican formas basica de las cuales se pueden construir nuevos graficos a partir de la composicion de distintos componentes que se adapten mejore a representar un escenario en especifico.
    
    
    ## qplot()
    
    Es una de las dos principalaes funciones de GGplot2, esta deja oculta al usaurio muchas opciones, busca facilidad y rapidez. Puede producir muchos tipos de graficos (dispersion, histogramas, caja, etc).
    
  ```R
     qplot(displ, hwy, data = mpg)
     # ejemplo de como graficar con 3 parametros
    
  ```
  
  Con estos parametros de data set (MPG) se crea un grafico de dispersion.
  
  En las gfraficas se puede incluir color para diferenciar entre tipo de datos con tan sol agregar un argumento
    
  ```R
    qplot(displ, hwy, data = mpg, color = drv) 
  
  ```
  
  Algunos de los argumentos de qplot son:
  
  - data: Marco de datos a utilizar (opcional). Si no se especifica, creará uno, extrayendo vectores del entorno actual.
  
  - geom: Vector de caracteres que especifica geom (s) para dibujar. El valor predeterminado es "punto" si se especifican x e y, e "histograma" si solo se especifica x. Al utilizar este parametro se sombrera de forma gris la tendencia de la dispercion y una curva que se ajuste lo mayor posible.
  
  ```R
    > qplot(displ, hwy, data = mpg, color=drv, geom = c("point", "smooth")) 
    # se graficara con puntos
    
    > qplot(drv,hwy,data=mpg,geom="boxplot")
    # se graficara con "bloxpots"
  ```
    
    
  Si utilizamos el parametro facets:
  
  ```R
  qplot(displ, hwy, data = mpg, facets = . ~ drv)
  ```
  - facets: grafica la dispersion en faces, tendremo asi uan forma mas legible de diferenciar variables.
  
  
  - xlim, ylim: Límites del eje X e Y
  
  - main, xlab, ylab: Vector de caracteres (o expresión) que proporciona el título de la trama, la etiqueta del eje xy la etiqueta del eje y respectivamente.
  
  - asp: La relación de aspecto y / x
  
    #### gcolorRamp 
    
    Devuelve una función con argumento un vector de valores entre 0 y 1 que se asignan a una matriz numérica de valores de color RGB con una fila por color y 3 o 4 columnas.
    
    ```R
   pal <- colorRamp(c("red", "blue"))
   
   pal(0)
      
      
          [,1] [,2] [,3]
  [1,]  255    0    0
    ```
    
  Tanto para colorRamp () como para colorRampPalette (), representas una nuestra paleta de colores unica segun la matriz que se genere, como por ejemplo
  
   ```R
  > pal(1)
       [,1] [,2] [,3]
  [1,]    0    0  255
  
  #Representa la intensidad mas alta del azul.
  
    ``` 
    
    Tambien se pueden generar sequencias como la siguiente:
    
     ```R
    pal(seq(0, 1, len = 6))
       [,1] [,2] [,3]
  [1,]  255    0    0
  [2,]  204    0   51
  [3,]  153    0  102
  [4,]  102    0  153
  [5,]   51    0  204
  [6,]    0    0  255
   ```
   Donde se itera para generar seis vectores de 3 columnas cada una. Cada un representando un color, en este ejemplo 51 puntos diferencian a cada color.
    
   NOTA: la funcion pal() se inicializa en un vector de elementos con nombre (colores) para definir el esquema de color.
  
        
    #### colorRampPalette
    
    Esta funcion es similar a colorRamp. También toma una paleta de colores y devuelve una función. Esta función, sin embargo, toma un número entero. El argumentos devuelve un numero entero en este caso en un vector de colores cada uno de representa una mezcla de colores de la paleta original.
    
    ```R
    
  p1 <- colorRampPalette(c("red", "blue"))
  
  > p1(2)
  [1] "#FF0000" "#0000FF"
    ```
    
    Donde  #FF0000 y #0000FF representan numeros hexadecimal cuya correspondencia es el rojo y el azul. Igualmente, puede generar sequencias de colores, pero expresados en un vector con valores hexadecimales.
    
  ```R
    > p1(seq(0,1,len=6))
    > 
    > p1(6)
    [1] "#FF0000" "#CC0033" "#990066" "#650099" "#3200CC" "#0000FF"
  ```
  
  Podemos crear una paleta con dos colores cualesquiera y entre ellos crear una "coleccion" de tantos colores como queramos entre ellos, como por ejemplo 20 colores entre rojo y amarillo
    
    ```R
    >p2 <- colorRampPalette(c("red","yellow"))
    >1] "#FF0000" "#F1000D" "#E4001A" "#D60028" "#C90035" "#BB0043" "#AE0050" "#A1005D"
   [9] "#93006B" "#860078" "#780086" "#6B0093" "#5D00A1" "#5000AE" "#4300BB" "#3500C9"
  [17] "#2800D6" "#1A00E4" "#0D00F1" "#0000FF"
  
  ```
  
  Para visualizar esto se peude usar la funcion showme ("argumento"), que se encarga de imprimir informacion basica de un dataframe. Ejemplos:
  
  ```R
  showme(x, size = 10, show = c("tiles", "head", "tail", "none"))
  
  > showMe(p2(20))
  > # donde p2(20) es la paleta creada con los 
  > # colores entre rojo y amarillo 
  ```
  
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
